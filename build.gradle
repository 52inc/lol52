buildscript {
    repositories {
        jcenter()
        mavenCentral();
    }

    dependencies {
        classpath 'eu.appsatori:gradle-fatjar-plugin:0.3'
        classpath 'com.squareup:javawriter:+'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eu.appsatori.fatjar'

sourceCompatibility = 1.8
project.ext.sourceCompatibility = JavaVersion.VERSION_1_8
project.ext.targetCompatibility = JavaVersion.VERSION_1_8
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'

    compile 'com.sparkjava:spark-core:2.1'

    compile 'commons-codec:commons-codec:1.9'
    compile 'org.apache.commons:commons-io:+'
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'log4j:log4j:1.2.17'
    compile 'org.slf4j:slf4j-log4j12:1.7.7'
    compile 'org.json:json:20140107'
    compile 'com.mchange:c3p0:0.9.2.1'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'com.github.lalyos:jfiglet:0.0.7'
    compile 'com.squareup:otto:1.3.7'
    compile 'org.yaml:snakeyaml:1.11'
    compile 'com.fasterxml.jackson.core:jackson-core:2.2.+'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.2.+'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.2.+'

    compile 'io.reactivex:rxjava:1.0.10'
    compile 'mysql:mysql-connector-java:5.1.35'

    compile 'com.google.dagger:dagger:2.0'
    compile 'com.google.dagger:dagger-compiler:2.0'

}

fatJar {
    manifest {
        attributes("Implementation-Title": "Gradle",
                   "Implementation-Version": version,
                   "Main-Class": 'com.ftinc.lolserv.App')
    }

    baseName = 'lol52-server'
    archiveName = baseName + ".jar"
    destinationDir = new File(getBuildDir(), 'outputs');

    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'

    from "log4j.properties"
}

// Generate a BuildConfig file to access config values from code
import org.apache.tools.ant.taskdefs.condition.Os
import com.squareup.javawriter.JavaWriter
import java.text.SimpleDateFormat
import static javax.lang.model.element.Modifier.*;
task generateConfigFile << {

    println "Generating BuildConfig.java file..."

    File buildConfigFile = new File('src/main/java/com/ftinc/lolserv/BuildConfig.java')

    // Delete if it already exists
    if(buildConfigFile.exists()){
        buildConfigFile.delete()
    }else{
        buildConfigFile.createNewFile()
    }

    boolean isDebug = version.toString().contains("SNAPSHOT");
    String environment = Os.isFamily(Os.FAMILY_MAC) ? "LOCAL" : "SERVER";
    String vers = "\"" + version.toString() + "\"";

    // Create java writer
    JavaWriter writer = new JavaWriter(new FileWriter(buildConfigFile))
    writer.emitPackage("com.ftinc.lolserv")
            .beginType("com.ftinc.lolserv.BuildConfig", "class", EnumSet.of(PUBLIC))
            .emitField("int", "LOCAL", EnumSet.of(PUBLIC, STATIC, FINAL), "0")
            .emitField("int", "SERVER", EnumSet.of(PUBLIC, STATIC, FINAL), "1")
            .emitEmptyLine()
            .emitField("boolean", "DEBUG", EnumSet.of(PUBLIC, STATIC, FINAL), isDebug.toString())
            .emitField("String", "VERSION", EnumSet.of(PUBLIC, STATIC, FINAL), vers)
            .emitField("int", "ENVIRONMENT", EnumSet.of(PUBLIC, STATIC, FINAL), environment)
            .endType()
            .close();

    println "Generated BuildConfig.java!"
}

compileJava.dependsOn generateConfigFile